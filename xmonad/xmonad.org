#+title: XMonad Config
#+PROPERTY:  header-args   :tangle ~/.xmonad/xmonad.hs
#+STARTUP: fold
#+auto_tangle: t


xmonad example config file.

A template showing all available configuration hooks,
and how to override the defaults in your own xmonad.hs conf file.

Normally, you'd only override those defaults you care about.
* Imports
#+begin_src haskell
import XMonad
import XMonad.Prelude
import XMonad.Util.SpawnOnce
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Util.Run
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.SetWMName
import XMonad.Layout.Spacing
import System.Exit
import XMonad.Prompt.Pass

import System.Process
import Data.Monoid
import Data.Maybe (fromJust)

import Control.Monad

import System.IO


-- for keymaskToString
import Data.Bits


import qualified XMonad.StackSet as W
import qualified Data.Map        as M
#+end_src

The preferred terminal program, which is used in a binding below and by
certain contrib modules .
* Defaults
Set the default apps
#+begin_src haskell
myTerminal      = "alacritty"
-- myEmacs         = "export DBUS_SESSION_BUS_ADDRESS=$(systemctl --user show-environment | grep DBUS_SESSION_BUS_ADDRESS | cut -d= -f 2-); /usr/bin/emacs --daemon &"
myQuitEmacs = "emacsclient -e \"(save-buffers-kill-emacs)\""
-- myEmacsServer         = "/usr/bin/emacs --daemon &"
myEmacsServer = "(if $(emacsclient -a true -e \"'false\"); then /usr/bin/emacs --daemon; fi) &" -- if no server, make one

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- Whether clicking on a window to focus also passes the click to the window
myClickJustFocuses :: Bool
myClickJustFocuses = False

-- Width of the window border in pixels.
--
myBorderWidth   = 1
#+end_src

Custom logout function
#+begin_src haskell
killEmacsCommand = "(let ((f (car (frame-list)))) (select-frame-set-input-focus f) (save-buffers-kill-emacs))"

-- myExit = io $ do
--     uninstallSignalHandlers
--     (_, Just ho1, _, hp1) <- createProcess (shell ("emacsclient -a true -e \""++killEmacsCommand++"\"")){ std_out=CreatePipe }
--     sOut <- hGetContents ho1
--     r <- waitForProcess hp1
--     installSignalHandlers
--     case (r,sOut) of
--         (ExitSuccess,"") -> exitWith ExitSuccess
--         _ -> hPutStrLn stderr "Emacs prohibited logout"
myExit = io exitSuccess
#+end_src

modMask lets you specify which modkey you want to use. The default
is mod1Mask ("left alt").  You may also consider using mod3Mask
("right alt"), which does not conflict with emacs keybindings. The
"windows key" is usually mod4Mask.

#+begin_src haskell
myModMask       = mod4Mask
#+end_src

The default number of workspaces (virtual screens) and their names.
By default we use numeric strings, but any string may be used as a
workspace name. The number of workspaces is determined by the length
of this list.

A tagging example:

> workspaces = ["web", "irc", "code" ] ++ map show [4..9]

#+begin_src haskell
myWorkspaces    = ["1","2","3","4","5","6","7","8","9"]
-- myWorkspaces = [" emacs ", " www ", " sys ", " doc ", " vbox ", " chat ", " mus ", " vid ", " mus"]
myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)

clickable ws = "<action=xdotool key super+"++show i++">"++ws++"</action>"
    where i = fromJust $ M.lookup ws myWorkspaceIndices

-- Border colors for unfocused and focused windows, respectively.
--
-- myNormalBorderColor  = "#ebdbb2"
-- myFocusedBorderColor = "#fe8019"

myNormalBorderColor  = "#000000"
myFocusedBorderColor = "#ffffff"
#+end_src

* Key Bindings
Key bindings. Add, modify or remove key bindings here.

#+begin_src haskell
data KeyBinding = KeyBinding {
    mask :: KeyMask
  , key :: KeySym
  , desc :: String
  , command :: X ()
}

togglExec = "~/miniconda3/bin/toggl"

myKeyBindings conf@(XConfig {XMonad.modMask = modm}) =
    [ KeyBinding modm                     xK_space       "Launch dmenu"                                     $    spawn "dmenu_run_history -sb \"#fe8019\" -i"
    , KeyBinding (modm .|. mod1Mask )     xK_equal       "Launch Terminal"                                  $    spawn "alacritty"
    , KeyBinding (modm .|. mod1Mask )     xK_minus       "Launch Emacs"                                     $    spawn "~/bin/e"
    , KeyBinding (modm .|. mod1Mask )     xK_0           "Launch qutebrowser"                               $    spawn "qutebrowser"
    , KeyBinding (modm .|. mod1Mask )     xK_9           "Launch Spotify"                                   $    spawn "spotify"
    , KeyBinding (modm .|. shiftMask)     xK_t           "launch toggl"                                     $    spawn $ togglExec ++ " www"
    , KeyBinding modm                     xK_semicolon   "start/stop toggl"                                 $    spawn "~/bin/mytoggl startstop"
    , KeyBinding (modm .|. shiftMask)     xK_semicolon   "start/stop toggl"                                 $    spawn "~/bin/mytoggl status"
    , KeyBinding (modm .|. shiftMask)     xK_b           "connect headphones"                               $    spawn $ "bluetoothctl connect F0:1D:BC:F6:94:37"
    , KeyBinding (modm .|. shiftMask)     xK_e           "restart emacs"                                    $    spawn $ myQuitEmacs ++ "; " ++ myEmacsServer
    , KeyBinding (modm .|. shiftMask)     xK_p           "Open Passwords"                                   $    passTypePrompt def
    , KeyBinding modm                     xK_f           "Rotate main monitor"                              $    spawn "/home/stuart/bin/flipscreen"
    , KeyBinding modm                     xK_s           "Sleep system"                                     $    spawn "systemctl suspend"
    , KeyBinding (modm .|. shiftMask)     xK_s           "Sleep display"                                    $    spawn "sleep 1; xset dpms force off"
    , KeyBinding modm                     xK_o           "Reload xmodmap"                                   $    spawn "xmodmap ~/.Xmodmap && notify-send \"xmodmap loaded\" -t 1000"
    , KeyBinding modm                     xK_g           "toggl dark mode"                                  $    spawn "~/bin/togglcolor"
    , KeyBinding modm                     xK_q           "close focused window"                             $    kill
    , KeyBinding modm                     xK_p           "Rotate through layouts"                           $    sendMessage NextLayout
    , KeyBinding (modm .|. shiftMask)     xK_space       "Reset layouts"                                    $    setLayout $ XMonad.layoutHook conf
    , KeyBinding modm                     xK_n           "Resize windows to default"                        $    refresh
    , KeyBinding modm                     xK_Tab         "Focus next window"                                $    windows W.focusDown
    , KeyBinding modm                     xK_j           "Focus next window"                                $    windows W.focusDown
    , KeyBinding modm                     xK_k           "Focus previous window"                            $    windows W.focusUp
    , KeyBinding (modm .|. shiftMask)     xK_j           "Focus next screen"                                $    prevScreen
    , KeyBinding (modm .|. shiftMask)     xK_k           "Focus previous screen"                            $    nextScreen
    , KeyBinding modm                     xK_Return      "Swap master window"                               $    windows W.swapMaster
 -- , KeyBinding ((modm .|. shiftMask)    xK_j           "Swap the focused window with the next window"     $    windows W.swapDown
 -- , KeyBinding ((modm .|. shiftMask)    xK_k           "Swap the focused window with the previous window" $    windows W.swapUp
    , KeyBinding modm                     xK_h           "Shrink the master area"                           $    sendMessage Shrink
    , KeyBinding modm                     xK_l           "Expand the master area"                           $    sendMessage Expand
    , KeyBinding modm                     xK_t           "Push window back into tiling"                     $    withFocused $ windows . W.sink
    , KeyBinding modm                     xK_comma       "Increment number of master windows"               $    sendMessage (IncMasterN 1)
    , KeyBinding modm                     xK_period      "Deincrement number of master windows"             $    sendMessage (IncMasterN (-1))
 -- , KeyBinding modm                     xK_b           "Toggle the status bar gap"                        $    sendMessage ToggleStruts
    , KeyBinding (modm .|. shiftMask)     xK_q           "Quit xmonad"                                      $    myExit
    , KeyBinding (modm .|. shiftMask)     xK_c           "Restart xmonad"                                   $    spawn "xmonad --recompile; xmonad --restart"
    , KeyBinding (modm .|. shiftMask)     xK_slash       "Display this help popup"                          $    spawn $ "notify-send --wait \"XMonad Help\" \"" ++ (help conf) ++ "\""
  --, KeyBinding (modm .|. shiftMask)     xK_slash       "Display this help popup"                          $    spawn ("echo \"" ++ (help conf) ++ "\" | xmessage -file -")
    ]
    ++
    [KeyBinding modm k ("Move to space" ++ show i) $ windows $ W.greedyView i
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]]
    ++
    [KeyBinding (shiftMask .|. modm) k ("Move window to space" ++ show i) $ windows $ W.shift i
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]]

myKeys conf = M.fromList $ map (\x -> ((mask x, key x), command x)) $ myKeyBindings conf
#+end_src

Mouse bindings: default actions bound to mouse events

#+begin_src haskell
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]

#+end_src

------------------------------------------------------------------------
* Layouts:

You can specify and transform your layouts by modifying these values.
If you change layout bindings be sure to use 'mod-shift-space' after
restarting (with 'mod-q') to reset your layout state to the new
defaults, as xmonad preserves your old layout settings by default.

The available layouts.  Note that each layout is separated by |||,
which denotes layout choice.

#+begin_src haskell
myLayout = (avoidStruts $ spacing 10 $ tiled ||| Mirror tiled) ||| Full
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled   = Tall nmaster delta ratio

     -- The default number of windows in the master pane
     nmaster = 1

     -- Default proportion of screen occupied by master pane
     ratio   = 1/2

     -- Percent of screen to increment by when resizing panes
     delta   = 3/100

#+end_src

* Rules
Window rules:

Execute arbitrary actions and WindowSet manipulations when managing
a new window. You can use this to, for example, always float a
particular program, or have a client always appear on a particular
workspace.

To find the property name associated with a program, use
> xprop | grep WM_CLASS
and click on the client you're interested in.

To match on the WM_NAME, you can use 'title' in the same way that
'className' and 'resource' are used below.

#+begin_src haskell
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , title     =? "Toggl Track"    --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore
    , title =? "Spotify"     --> doShift ( myWorkspaces !! 9 )
                        ]

#+end_src

* Main
#+begin_src haskell
------------------------------------------------------------------------
-- Event handling

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
myEventHook = mempty

------------------------------------------------------------------------
-- Status bars and logging

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'XMonad.Hooks.DynamicLog' extension for examples.
--
myLogHook = return ()

------------------------------------------------------------------------
-- Startup hook

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
myStartupHook = do
    spawnOnce "nitrogen --restore &"
    spawn "dunst &"
    -- spawn "picom &"
    -- spawnOnce myEmacsServer
    -- spawnOnce "dropbox start &"
    setWMName "LG3D"

------------------------------------------------------------------------

-- Now run xmonad with all the defaults we set up.

-- Run xmonad with the settings you specify. No need to modify this.
--
main = do
--    xmproc <- spawnPipe "xmobar -x 0 $HOME/.config/xmobar/xmobarrc"
    xmonad $ docks defaults

#+end_src

A structure containing your configuration settings, overriding
fields in the default config. Any you don't override, will
use the defaults defined in xmonad/XMonad/Config.hs

No need to modify this.


#+begin_src haskell
defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        clickJustFocuses   = myClickJustFocuses,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }
#+end_src

* Help
Finally, a copy of the default bindings in simple textual tabular format.
#+begin_src haskell
myKeymaskToString msk =
  concat . reverse . fst . foldr go ([], msk) $ masks
 where
  masks :: [(KeyMask, String)]
  masks = map (\m -> (m, show m))
              [0 .. toEnum (finiteBitSize msk - 1)]
       ++ [ (lockMask,    "lock-")
          , (controlMask, "Control-"   )
          , (shiftMask,   "Shift-"   )
          , (mod5Mask,    "M5-"  )
          , (mod4Mask,    "Super-"  )
          , (mod3Mask,    "M3-"  )
          , (mod2Mask,    "M2-"  )
          , (mod1Mask,    "Alt-"  )
          ]

  go :: (KeyMask, String) -> ([String], KeyMask) -> ([String], KeyMask)
  go (m, s) a@(ss, v)
    | v == 0       = a
    | v .&. m == m = (s : ss, v .&. complement m)
    | otherwise    = a


columnWidth = 20
help conf = unlines $ map formatkb $ myKeyBindings conf
        where
            -- formatkb kb =  keyStr ++ (take (length keyStr - columnWidth) (repeat ' ')) ++ "  --  " ++ (desc kb)
            formatkb kb =  keyStr ++ (take (columnWidth - length keyStr) (repeat ' ')) ++ (desc kb)
                where
                  keyStr = (myKeymaskToString $ mask kb)  ++  (keysymToString $ key kb)

#+end_src
