#+title: ZSH Config
#+PROPERTY:  header-args   :tangle ~/.zshrc
#+STARTUP: fold
#+auto_tangle: t

#+begin_src bash
#test
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
#

if [ $TERM = "dumb" ]; then
    exec bash
fi

# Path to your oh-my-zsh installation.
export CONFIG="$HOME/.config"
export ZSH="$CONFIG/oh-my-zsh"
export EDITOR="emacsclient -c"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="gruvbox"
SOLARIZED_THEME="dark"


# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM="$CONFIG/zsh/custom"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git zsh-vi-mode)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"




if [[ -z $DISPLAY ]]; then
    alias e='emacsclient'
else
    alias e='emacsclient -c'
fi

alias rm='trash'
alias mv='mv -i'
alias ..='cd ..'
alias lt='ls -ltr'
alias hp='htop -d 100'
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      ,*.tar.bz2)   tar xjf $1   ;;
      ,*.tar.gz)    tar xzf $1   ;;
      ,*.bz2)       bunzip2 $1   ;;
      ,*.rar)       unrar x $1   ;;
      ,*.gz)        gunzip $1    ;;
      ,*.tar)       tar xf $1    ;;
      ,*.tbz2)      tar xjf $1   ;;
      ,*.tgz)       tar xzf $1   ;;
      ,*.zip)       unzip $1     ;;
      ,*.Z)         uncompress $1;;
      ,*.7z)        7z x $1      ;;
      ,*.deb)       ar x $1      ;;
      ,*.tar.xz)    tar xf $1    ;;
      ,*.tar.zst)   unzstd $1    ;;
      ,*)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

conda_cd ()
{
    eval "\cd $1"
    if [ -e .condaenv ] ; then
        conda activate $(cat .condaenv)
    fi
}

alias gc="git commit -m"
alias ga="git add"
alias gt="git status"
alias cd="conda_cd"
cd . # so ^ runs on new tab


export PATH=$HOME/bin:$HOME/.emacs.d/bin:$PATH

#+end_src

* Config things
#+begin_src bash
checkupdates() {
    git fetch > /dev/null 2>&1
    if [[ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]]; then
        echo "Config updates available!"
    fi
}
(cd $CONFIG && checkupdates)

config() (
    cd $CONFIG
    if [ $1 = 'update' ]; then
        modifiedfiles=$(git ls-files --modified)
        if [ $modifiedfiles != "" ]; then
            echo $modifiedfiles | xargs git add
            git commit
        fi
        git pull
        git push
        eval "./init"
    else
        eval "git $@"
    fi
)



#+end_src

* Anaconda
#+begin_src bash
case $(hostname) in
    Sarabi*)
        if [ $(arch) = 'arm64' ]; then
            export CONDAROOT='/opt/miniforge3'
        else
            export CONDAROOT='/opt/miniconda3'
        fi ;;
    ,*)     export CONDAROOT="$HOME/miniconda3"
esac
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#
__conda_setup="$($CONDAROOT/bin/conda 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$CONDAROOT/etc/profile.d/conda.sh" ]; then
        . "$CONDAROOT/etc/profile.d/conda.sh"
    else
        export PATH="$CONDAROOT/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
#+end_src

* ITerm integration
#+begin_src bash
if [[ "$TERM" == 'xterm-256color' && -e "${HOME}/.iterm2_shell_integration.zsh" ]]; then
    test  && source "${HOME}/.iterm2_shell_integration.zsh"
    export ITERM2_SQUELCH_MARK=1
fi
#+end_src


#+RESULTS:
